rm(list=ls())
library(knitr)
for(i in 10:13){
(numTutorial = i)
(fichero = paste("Tutorial-", numTutorial, ".Rnw", sep="",collapse=""))
knit2pdf(input=fichero, encoding="UTF-8")
}
for(i in 10:13){
(numTutorial = i)
(fichero = paste("Tutorial-", numTutorial, ".Rnw", sep="",collapse=""))
knit2pdf(input=fichero, encoding="UTF-8")
}
install.packages(c("boot", "curl", "RcppEigen", "RefManageR", "ResourceSelection", "rmarkdown"))
rm(list=ls())
library(knitr)
Sys.setlocale("LC_ALL", "C")
Sys.setlocale("LC_ALL", "C")
for(i in 13:13){
(numTutorial = i)
(fichero = paste("Tutorial-", numTutorial, ".Rnw", sep="",collapse=""))
knit2pdf(input=fichero, encoding="UTF-8")
}
R.version.string
install.packages("asbio")
install.packages("TeachingDemos")
source('~/.active-rstudio-document', echo=TRUE)
beta1 = cov(data$x, data$y)
(beta1 = cov(data$x, data$y))
(beta1 = cov(data$x, data$y)/var(data$x))
(sumXY = sum(data$x*data$y))
(sumX = sum(data$x))
(sumX2 = sum(data$x^2))
(n = nrow(data))
(beta1 = (sumXY - (sumX * sumY) / n) / (sumX2 - (sumX^2 / n)))
(sumY = sum(data$y))
(beta1 = (sumXY - (sumX * sumY) / n) / (sumX2 - (sumX^2 / n)))
(meanX = mean(X))
(meanY = mean(Y))
(meanX = mean(data$age))
(meanX = mean(data$x))
(meanY = mean(data$y))
(beta0 = meanY - beta1 * meanX)
(lmXY = lm(y ~x, data))
(beta0 = lmXY$coefficients[1])
(beta1 = lmXY$coefficients[2])
plot(data$x, data$y)
abline(beta0, beta1)
plot(data$x, data$y, xlab = "age", ylab = "sbp")
abline(beta0, beta1)
summary(lmXY)
anova(lmXY)
lmXY$df.residual
lmXY$effects
lmXY$assign
lmXY$rank
lmXY$terms
sumLmXY = summary(lmXY)
sumLmXY$aliased
sumLmXY$sigma
lmXY$coefficients
lmXY$terms
lmXY$assign
lmXY$qr
lmXY$model
pf(sumLmXY$fstatistic,df1 = 1, df2 = n - 2, lower.tail = FALSE )
pf(sumLmXY$fstatistic,df1 = 1, df2 = n - 2, lower.tail = FALSE )[1]
(pValueLmXY = pf(sumLmXY$fstatistic,df1 = 1, df2 = n - 2, lower.tail = FALSE)[1])
(RlmXY =  sumLmXY$r.squared)
RlmXY =  sumLmXY$r.squared
adjRlmXY =  sumLmXY$adj.r.squared
sumLmXY$cov.unscaled
sum((sumLmXY$residuals)^2)
sqrt(sum((sumLmXY$residuals)^2))
sumLmXY$aliased
sumLmXY$sigma
(AnovaXY = anova(lmXY))
AnovaXY$`Sum Sq`
sum(AnovaXY$`Sum Sq`)
confint(lmXY, level=0.95)
(varX = var(data$x))
(varX = var(data$y))
(varX = var(data$x))
(varY = var(data$y))
(s2yx = ((n - 1) / (n - 2)) * (varY - beta1^2 * varX))
AnovaXY$`Mean Sq`
sqrt(s2yx)
residErrorLmXY
sumLmXY$sigma
(sdX = sd(data$x))
(tStstc = beta_1 / sqrt(s2yx / ((n-1) * varX)))
(tStstc = beta1 / sqrt(s2yx / ((n-1) * varX)))
n - 2
pValue
pValue = 2 * pt(abs(tStstc), df = n - 2, lower.tail = FALSE)
pValue
qt(1 - 0.05/2, df = n - 2)
qt(0.975, df = n - 2)
(tStstc = (beta0 - 75) / sqrt(s2yx *  (1 / n + meanX^2 / ((n -1 ) * varX))))
qt(0.975, df = n - 2)
(s2yx0 = s2yx * ((1 / n) + (x0 - meanX)^2 / ((n - 1) * varX)))
x0 = 65
(s2yx0 = s2yx * ((1 / n) + (x0 - meanX)^2 / ((n - 1) * varX)))
s2yx
sqrt(s2yx0)
sqrt(s2yx0)
(tquantile = qt(0.975, df = n - 2))
(tquantile = qt(0.95, df = n - 2))
(y0 = beta0 + beta1 * x0)
(confInterval = y0 + c(-1, 1) * tquantile * sqrt(s2yx0))
(confd.intrvl = predict(lmXY, int="c", newdata=data.frame(x = 65), level=0.90))
(predInterval = predict(lmXY, int="p", newdata=data.frame(x = 65), level=0.90))
(stdErrPred = sqrt(s2yx * (1 + (1 / n) + (x0 - meanX)^2 / ((n - 1) * varX))))
(predInterval = y0 + c(-1, 1) * tquantile * stdErrPred)
predIntrvls = predict(lmXY, int="p", newdata=data.frame(x = xValues), level=0.95)
confIntrvls = predict(lmXY, int="c", newdata=data.frame(x = xValues), level=0.95)
head(confIntrvls)
xValues = seq(min(x), max(x), length.out=100)
predIntrvls = predict(lmXY, int="p", newdata=data.frame(x = xValues), level=0.95)
confIntrvls = predict(lmXY, int="c", newdata=data.frame(x = xValues), level=0.95)
xValues = seq(min(x), max(x), length.out=100)
xValues = seq(min(data$x), max(data$x), length.out=100)
predIntrvls = predict(lmXY, int="p", newdata=data.frame(x = xValues), level=0.95)
confIntrvls = predict(lmXY, int="c", newdata=data.frame(x = xValues), level=0.95)
head(confIntrvls)
plot(data$x, data$y, pch=4, lwd=2, col="black", cex.lab=1.1, cex.axis=1.1)
abline(lmXY, lwd=2, col="blue")
segments(data$x,fitted(lmXY), data$x, data$y, lwd=2)
matlines(xValues, predIntrvls[ ,2:3], lty=c(1, 1, 1), col="red", lwd=2)
matlines(xValues, confIntrvlsl[ ,2:3], lty=c(1, 1, 1), col="darkgreen", lwd=2)
predIntrvls = predict(lmXY, int="p", newdata=data.frame(x = xValues), level=0.95)
confIntrvls = predict(lmXY, int="c", newdata=data.frame(x = xValues), level=0.95)
matlines(xValues, confIntrvlsl[ ,2:3], lty=c(1, 1, 1), col="darkgreen", lwd=2)
matlines(xValues, confIntrvls[ ,2:3], lty=c(1, 1, 1), col="darkgreen", lwd=2)
plot(data$x, data$y, pch=4, lwd=2,
col="black", xlab="age", ylab = "sbp",
cex.lab=1.1, cex.axis=1.1)
abline(lmXY, lwd=2, col="blue")
segments(data$x,fitted(lmXY), data$x, data$y, lwd=2)
matlines(xValues, predIntrvls[ ,2:3], lty=c(1, 1, 1), col="red", lwd=2)
matlines(xValues, confIntrvls[ ,2:3], lty=c(1, 1, 1), col="darkgreen", lwd=2)
rm(list=ls())
library(knitr)
fichero = "Tutorial-00-py.Rnw"
knit2pdf(input=fichero, encoding="UTF-8")
setwd("C:/Dropbox/PostData_Fernando2/TutorialesPython")
fichero = "Tutorial-00-py.Rnw"
knit2pdf(input=fichero, encoding="UTF-8")
fichero = "Tutorial-02-py.Rnw"
knit2pdf(input=fichero, encoding="UTF-8")
fichero = "Tutorial-02-py.Rnw"
knit2pdf(input=fichero, encoding="UTF-8")
